public class xt16 {
    public static Object Load(String xmlPath) {
        File FileIn = new File(xmlPath);
        if(FileIn.exists()) {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            return null;
        }
        return null;
    }
}

# get all the simple names of the above code
Object
String
File
File()
exists()
DocumentBuilderFactory
newInstance()


===================================================================

public class xt19 {
    public List<String> tags = new ArrayList<String>();
    public List<String> notags = new ArrayList<String>();
}

# get all the simple names of the above code
List
String
ArrayList
ArrayList()


===================================================================

public class xt2 {
    public  static void h1(){
        XStream xstream = new XStream(new DomDriver( "" , new NoNameCoder()));
    }
}

# get all the simple names of the above code
XStream
XStream()
DomDriver
NoNameCoder
NoNameCoder()


===================================================================

public class xt20 {
    public static void h1(){
        XStream xstream = new XStream();
        ClassAliasingMapper mapper = new ClassAliasingMapper(xstream.getMapper());
        xstream.registerLocalConverter(Test.class,  "" , new CollectionConverter(mapper));
    }
}

# get all the simple names of the above code
XStream
XStream()
ClassAliasingMapper
ClassAliasingMapper()
getMapper()
registerLocalConverter()
Test
CollectionConverter
CollectionConverter()


===================================================================

public xt9() throws TransformerConfigurationException {
}

# get all the simple names of the above code
TransformerConfigurationException


===================================================================

public class jt19 {
   public static void h1(){
      String input =  ""  ;
      DateTimeFormatter f = DateTimeFormatter.ofPattern(  ""  ) ;
      LocalDateTime ldt = LocalDateTime.parse( input , f ) ;
   }
}

# get all the simple names of the above code
String
DateTimeFormatter
ofPattern()
LocalDateTime
parse()


===================================================================

public class jt18 {
    public static void h1() throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat( "" );
        Date date = sdf.parse( "" );
        System.out.println(date);
    }
}

# get all the simple names of the above code
ParseException
SimpleDateFormat
SimpleDateFormat()
Date
parse()
System
out
println()


===================================================================

public class hb4 {
    public static Session getSessionobject(){
        SessionFactory sessionFactory = null;
        assert false;
        return sessionFactory.getCurrentSession();
    }
}

# get all the simple names of the above code
Session
SessionFactory
assert
getCurrentSession()


===================================================================

public class hb19 {
    public static void h1(){
        String typename=null;
        Type type = (Type) TypeFactory.heuristicType(typename);
        boolean serializable = type!=null && type instanceof SerializableType;
    }
}

# get all the simple names of the above code
String
Type
TypeFactory
heuristicType()
boolean
SerializableType


===================================================================

public class hb18 {
    public static void h1(){
        List model = null;
        SimpleValue iv = new SimpleValue( model.getCollectionTable() );
        model.setIndex(iv);
    }
}

# get all the simple names of the above code
List
SimpleValue
SimpleValue()
getCollectionTable()
setIndex()


===================================================================

public class hb17 {
    public static void h1(){
        Appender clazz = null;
        String typename = clazz.getName();
        Type type = (Type) TypeFactory.heuristicType(typename);
        boolean serializable = type!=null && type instanceof SerializableType;
    }
}

# get all the simple names of the above code
Appender
String
getName()
Type
TypeFactory
heuristicType()
boolean
SerializableType


===================================================================

public class hb16<Car_OneToMany> {
    private List<Car_OneToMany> listOfCarsBeingDriven = new ArrayList<Car_OneToMany>();
}

# get all the simple names of the above code
List
ArrayList


===================================================================

public class hb13 {
    private Type h1(Class clazz) throws HibernateException {
        String typename = clazz.getName();
        return (Type) Hibernate.entity(clazz);
    }
}

# get all the simple names of the above code
Type
Class
HibernateException
String
getName()
Hibernate
entity()


===================================================================

public class hb11 {
    private Configuration configuration;
    private SessionFactory sessionFactory;
    private Session session;
    private Transaction transaction;
}

# get all the simple names of the above code
Configuration
SessionFactory
Session
Transaction


===================================================================

public class ad8 {
       public static void setLocale(Activity activity, String languageCode) {
           Locale locale = new Locale(languageCode);
           Locale.setDefault(locale);
           Resources resources = activity.getResources();
       }
}

# get all the simple names of the above code
Activity
String
Locale
Locale()
setDefault()
Resources
getResources()


===================================================================

public class ad6 {
  public void h1(){
      DisplayMetrics displayMetrics = new DisplayMetrics();
      int height = displayMetrics.heightPixels;
      int width = displayMetrics.widthPixels;
  }
}

# get all the simple names of the above code
DisplayMetrics
DisplayMetrics()
int
heightPixels
widthPixels


===================================================================

public class ad5 {
    public static void h1(){
        Bundle args = new Bundle();
        args.putInt( "" , 328);
        args.putString( "" ,  "" );
    }
}

# get all the simple names of the above code
Bundle
Bundle()
putInt()
String
putString()


===================================================================

public class ad4 {
    public static void hideKeyboardFrom(Context context, View view) {
        InputMethodManager imm = (InputMethodManager) context.getSystemService(Activity.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
    }
}

# get all the simple names of the above code
Context
View
InputMethodManager
getSystemService()
Activity
hideSoftInputFromWindow()
getWindowToken()


===================================================================

public class ad20 {
    public static void h1(){
        String currentDate = new SimpleDateFormat( "" , Locale.getDefault()).format(new Date());
        Instant instant = Instant.now();
    }
}

# get all the simple names of the above code
String
SimpleDateFormat
SimpleDateFormat()
Locale
getDefault()
format()
Date
Instant
now()


===================================================================

public class ad16 {
    private void hideKeyboard(Activity activity) {
        if (activity != null && activity.getWindow() != null) {
            InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);
        }
    }
}

# get all the simple names of the above code
Activity
getWindow()
InputMethodManager
getSystemService()
Context
INPUT_METHOD_SERVICE


===================================================================

public class ad11 {
        public static String convertToHex(byte[] data) {
            StringBuilder buf = new StringBuilder();
            return buf.toString();
        }
}

# get all the simple names of the above code
String
byte[]
StringBuilder
StringBuilder()
toString()


===================================================================

public class ad2 {
    public static void hideKeyboard(Activity activity) {
        InputMethodManager imm = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);
        View view = activity.getCurrentFocus();
    }
}

# get all the simple names of the above code
Activity
InputMethodManager
getSystemService()
View
getCurrentFocus()


===================================================================

public class jt2 {
   public static void f1(){
       Date past = new Date(110, 5, 20);
       Date today = new Date(110, 6, 24);
       int days = Days.daysBetween(new DateTime(past), new DateTime(today)).getDays();
   }
}

# get all the simple names of the above code
Date
Date()
DateTime
DateTime()
Days
daysBetween()
getDays()


===================================================================

public class jdk4 {
    public static void h1(String oldDate, String format) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        Date dt = sdf.parse(oldDate);
        long epoch = dt. getTime();
    }
}

# get all the simple names of the above code
String
ParseException
SimpleDateFormat
SimpleDateFormat()
Date
parse()
long
getTime()


===================================================================

public class gt3 {
    public static void h1(){
        RootLayoutPanel rootLayoutPanel = RootLayoutPanel.get();
        DockLayoutPanel dock = new DockLayoutPanel(Style.Unit.EM);
        rootLayoutPanel.add(dock);
     }
}

# get all the simple names of the above code
RootLayoutPanel
get()
DockLayoutPanel
DockLayoutPanel()
Style
Unit
add()


===================================================================

public class gt6 {
    public static void h1(){
        long time = System.currentTimeMillis();
        long milisPerYear = new BigInteger( "" ).longValue();
        String currentYear = String.valueOf((int) Math.floor(time / milisPerYear) + 1970);
    }
}

# get all the simple names of the above code
long
System
currentTimeMillis()
BigInteger
longValue()
String
valueOf()
Math
floor()


===================================================================

public class hb12 {
    public Type getReturnType(Type columnType, Mapping mapping) throws QueryException {
        int[] sqlTypes = new int[0];
        if (sqlTypes.length!=1) throw new QueryException( "" );
        return columnType;
    }
}

# get all the simple names of the above code
Type
getReturnType()
Type
Mapping
QueryException
int
length
QueryException()


===================================================================

public class jt10 {
    public static void h1(){
        DateTime now = DateTime.now();
        DateTime dateTime = now.plusMinutes(10);
        Seconds seconds = Seconds.secondsBetween(now, dateTime);
    }
}

# get all the simple names of the above code
DateTime
now()
DateTime
plusMinutes()
Seconds
secondsBetween()


===================================================================

public class jt13 {
    public static void h1(){
        ZoneId z = ZoneId.of(  ""  ) ;
        ZonedDateTime now = ZonedDateTime.now( z ) ;
    }
}

# get all the simple names of the above code
ZoneId
of()
ZonedDateTime
now()


===================================================================

public class jt15 {
    public static void h1(long timestamp1, long timestamp2){
        Calendar startDate = Calendar.getInstance(TimeZone.getDefault());
        Calendar endDate = Calendar.getInstance(TimeZone.getDefault());
    }
}

# get all the simple names of the above code
long
Calendar
getInstance()
TimeZone
getDefault()


===================================================================

public class jt9 {
    public static void h1() {
        LocalDate today = LocalDate.now();
        ZonedDateTime zdt = today.atStartOfDay().atZone(ZoneId.systemDefault());
        OffsetDateTime odt = zdt.toOffsetDateTime();
    }
}

# get all the simple names of the above code
LocalDate
now()
ZonedDateTime
atStartOfDay()
atZone()
ZoneId
systemDefault()
OffsetDateTime
toOffsetDateTime()


===================================================================

public class xt1 {
    public static void h1(){
        XmlFriendlyNameCoder nameCoder = new XmlFriendlyNameCoder( "" ,  "" );
        XStream xmlStream = new XStream(new Dom4JDriver(nameCoder));
    }
}

# get all the simple names of the above code
XmlFriendlyNameCoder
XmlFriendlyNameCoder()
XStream
XStream()
Dom4JDriver
Dom4JDriver()


===================================================================

public abstract class xt14 {
    public static void h1(){
    final XStream stream = new XStream(new DomDriver());
    }
}

# get all the simple names of the above code
XStream
XStream()
DomDriver


===================================================================

public class xt4 {
    public static void h1(){
        XStream xstream = new XStream(new JettisonMappedXmlDriver());
        xstream.alias( "" , Entity[].class);
    }
}

# get all the simple names of the above code
XStream
XStream()
JettisonMappedXmlDriver
alias()
Entity
class


===================================================================

public class xt6 {
    public static void h1(){
        JettisonMappedXmlDriver xmlDriver = new JettisonMappedXmlDriver();
        XStream xstream = new XStream(xmlDriver);
    }
}

# get all the simple names of the above code
JettisonMappedXmlDriver
JettisonMappedXmlDriver()
XStream
XStream()


===================================================================

public class xt7 {
    public static void h1(){
        XStream xstream = new XStream();
        xstream.autodetectAnnotations(true);
    }
}

# get all the simple names of the above code
XStream
XStream()
autodetectAnnotations()


===================================================================

public class xt8 {
    public  void h1(){
        List<Comment> comments = new ArrayList<Comment>();
    }
}

# get all the simple names of the above code
void
List
Comment
ArrayList


===================================================================

public class jdk7 {
    public static  void h1() throws ParseException {
        SimpleDateFormat formatter = new SimpleDateFormat( "" );
        formatter.setTimeZone(TimeZone.getTimeZone( "" ));
        Date date = formatter.parse( "" );
    }
}

# get all the simple names of the above code
ParseException
SimpleDateFormat
SimpleDateFormat()
setTimeZone()
TimeZone
getTimeZone()
Date
parse()


===================================================================

public void onMouseDown(MouseDownEvent event) {
    System.out.println( "" );
}

# get all the simple names of the above code
MouseDownEvent
System
out
println()


===================================================================

public class jdk6 {
    private static boolean h1() {
        boolean hasPermission = true;
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(new PropertyPermission( "" ,  "" ));
        }
        return hasPermission;
    }
}

# get all the simple names of the above code
boolean
SecurityManager
System
getSecurityManager()
null
checkPermission()
PropertyPermission
String


===================================================================

public class jdk5 {
    public static void f1() throws MalformedURLException {
        File jar = new File( "" );
        URLClassLoader loader = new
                URLClassLoader(new URL[]{jar.toURI().toURL()});
    }
}

# get all the simple names of the above code
MalformedURLException
File
File()
URLClassLoader
URLClassLoader()
URL
toURI()
toURL()


===================================================================

public class jdk11 {
    private static boolean h1() {
        boolean hasPermission = true;
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
                hasPermission = false;
        }
        return hasPermission;
    }
}

# get all the simple names of the above code
boolean
SecurityManager
System
getSecurityManager()


===================================================================

public class jdk12 {
    public static boolean h1() {
        String os = System.getProperty( "" ).toLowerCase();
        return os.indexOf( "" ) != -1 || os.indexOf( "" ) != -1;
    }
}

# get all the simple names of the above code
String
System
getProperty()
toLowerCase()
boolean
indexOf()


===================================================================

public class jdk13 {
    public static boolean isMac() {
        String os = System.getProperty( "" );
        return os.contains( "" );
    }
}

# get all the simple names of the above code
String
System
getProperty()
contains()


===================================================================

public class jdk3 {
    public static void h1(String oldDate, String format) throws ParseException {
        DateTimeFormatter dtf  = DateTimeFormatter.ofPattern(format);
        LocalDateTime dt = LocalDateTime.parse(oldDate, dtf);
        ZonedDateTime zdtzone = dt.atZone(ZoneId.of( "" ));
    }
}

# get all the simple names of the above code
String
ParseException
DateTimeFormatter
ofPattern()
LocalDateTime
parse()
ZonedDateTime
atZone()
ZoneId
of()


===================================================================

public class jdk14 {
    public static void h1(String aFile) throws IOException {
        Desktop desktop = Desktop.getDesktop();
        desktop.open(new File(aFile));
    }
}

# get all the simple names of the above code
String
IOException
Desktop
getDesktop()
open()
File
File()


===================================================================

public class jdk15 {
    public static void h1(String[] args) {
        byte[] b = { -5, -122, -28};
        System.out.println( ""  + Arrays.toString(b));
        System.out.println( ""  + b.length);
    }
}

# get all the simple names of the above code
String[]
byte[]
System
println()
Arrays
toString()


===================================================================

public class jdk16 {
    public static void h1(String[] args) {
        SimpleDateFormat sf = new SimpleDateFormat( "" );
        String str3 =  "" ;
    }
}

# get all the simple names of the above code
String[]
SimpleDateFormat
SimpleDateFormat()
String


===================================================================

public class jdk19 {
    public static void h1() {
        int bufferSize = 1024;
        char[] buffer = new char[bufferSize];
        StringBuilder out = new StringBuilder();
    }
}

# get all the simple names of the above code
int
char
StringBuilder
StringBuilder()


===================================================================

public class jdk2 {
    public static void main(String args[]){
        String userDirPropertyName =  "" ;
        File initialUserDir = new File(System.getProperty(userDirPropertyName));
        System.out.println( ""  + initialUserDir.getAbsolutePath() +  "" );
    }
}

# get all the simple names of the above code
String
File
File()
getProperty()
System
out
println()
getAbsolutePath()


===================================================================